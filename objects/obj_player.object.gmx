<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_player_old</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize Variables
grav = 0.2;
hsp = 0;
hsp_carry = 0;
vsp = 0;
move_speed = 4;
jump_speed_normal = 7;
jump_speed_powerup = 10;
max_num_jumps = 2;
current_num_jumps = max_num_jumps;
key_down = 0;

// initialize jump_speed as normal speed
jump_speed = jump_speed_normal;

if (global.checkpoint_room == room){
  x = global.checkpoint_x;
  y = global.checkpoint_y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset jump_speed after alarm

jump_speed = jump_speed_normal;

// just flash the green square for now to keep things simple
sprite_index = spr_player_old;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle movement of the Player Character

// get and process the player's input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_down = keyboard_check(vk_down);
key_jump = keyboard_check_pressed(vk_space);
key_jump_held = keyboard_check(vk_space);
move = key_left + key_right;
hsp = move * move_speed;

// falling handling, can just add since this is set to
// zero for floor contact anyway
if (vsp &lt; 10){
  vsp += grav;
}

// control which direction the character sprite is facing
if (move != 0){

  // this is conveniant because move is always 1, 0, or -1
  // so the image will be flipped horizontally when moving the other direction
  image_xscale = move;
}

// if the player is on the ground, reset number of jumps available
// and set correct animations, make sure and use a consistent mask
// on the object as well
if (place_meeting(x, y + 1, obj_wall)){
  current_num_jumps = max_num_jumps;
  if (move != 0){
    sprite_index = spr_player_run;
  } else {
    sprite_index = spr_player_idle;
  }
} else {
  if (vsp &lt; 0){
    sprite_index = spr_player_jump;
  } else {
    sprite_index = spr_player_fall;
  }
}

/*
  Give the player an uncounted jump if they're touching a wall
  from the left or right.
  
  Of note here, since the player has absolute (i.e. frame perfect)
  control of their horizontal movement, pushing them away from the
  wall has very little effect right now (there's no momentum, they
  can simply snap back). Thus they can climb the wall with these
  jumps and easily abuse the mechanic.
  
  The else is necessary to make sure the player still gets their
  subsequent air jumps if they were touching a wall.
  
  Also of note, if the player starts out touching a wall they can
  get 2 air jumps, and the first jump off the ground won't count
  either.
*/
if (key_jump &amp;&amp; (place_meeting(x + 1, y, obj_wall) || place_meeting(x - 1, y, obj_wall))){
  vsp = -jump_speed;
} else if (key_jump &amp;&amp; current_num_jumps &gt; 0){
  vsp = -jump_speed;
  current_num_jumps -= 1;
}

/*
  Simple "one line" handler for variable jump height with
  way too much commenting because tutorial.

  Here max prevents the player from resetting if they
  are simply falling down, remember that negative speed
  means that the player is moving upwards on screen.

  Also of note, this is frame precise control of height,
  you can use (jump_speed / X) for less precision.

  If you have springs, make sure and tweak this line to
  not allow the player to stop themselves after springing.
  Along with springs this nullifies hopping off enemies as
  well, look in to fixing this later.
*/
if ((vsp &lt; 0) &amp;&amp; (!key_jump_held)){
  vsp = max(vsp, 0);
}

var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

// Horizontal Collision with pixel precision
if (place_meeting(x + hsp_final, y, obj_wall)){
    while (!place_meeting(x + sign(hsp_final), y, obj_wall)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
}
x += hsp_final;

// Vertical Collision with pixel precision
if (place_meeting(x, y + vsp, obj_wall)){
    while (!place_meeting(x, y + sign(vsp), obj_wall)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
